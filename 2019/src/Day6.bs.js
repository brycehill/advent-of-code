// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var $$Map = require("bs-platform/lib/js/map.js");
var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Lib$AdventOfCode19 = require("./Lib.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var StringMap = $$Map.Make({
      compare: $$String.compare
    });

function sum(param) {
  return List.fold_left((function (prim, prim$1) {
                return prim + prim$1 | 0;
              }), 0, param);
}

var input = List.filter((function (s) {
          return s !== "";
        }))($$Array.to_list(Curry._1(Lib$AdventOfCode19.Lib.openFile, "input6.txt").split("\n")));

var partial_arg = StringMap.empty;

function buildMap(param) {
  return List.fold_left((function (map, t) {
                var match = t.split(")");
                if (match.length !== 2) {
                  throw [
                        Caml_builtin_exceptions.match_failure,
                        /* tuple */[
                          "Day6.re",
                          16,
                          10
                        ]
                      ];
                }
                var orbitee = match[0];
                var orbiter = match[1];
                var match$1 = Curry._2(StringMap.mem, orbitee, map);
                var orbiters = match$1 ? Pervasives.$at(Curry._2(StringMap.find, orbitee, map), /* :: */[
                        orbiter,
                        /* [] */0
                      ]) : /* :: */[
                    orbiter,
                    /* [] */0
                  ];
                return Curry._3(StringMap.add, orbitee, orbiters, map);
              }), partial_arg, param);
}

function countOrbitsForNodes(map, nodes) {
  return List.fold_left((function (count, k) {
                var match = Curry._2(StringMap.mem, k, map);
                if (match) {
                  var v = Curry._2(StringMap.find, k, map);
                  var c = countOrbitsForNodes(map, v);
                  return count + c | 0;
                } else {
                  return count;
                }
              }), List.length(nodes), nodes);
}

function getEdges(map) {
  return List.map((function (param) {
                return param[1];
              }), Curry._1(StringMap.bindings, map));
}

function countAllOrbits(map) {
  return sum(List.map((function (param) {
                    return countOrbitsForNodes(map, param);
                  }), getEdges(map)));
}

console.log(countAllOrbits(buildMap(input)));

var Lib = Lib$AdventOfCode19.Lib;

exports.Lib = Lib;
exports.StringMap = StringMap;
exports.sum = sum;
exports.input = input;
exports.buildMap = buildMap;
exports.countOrbitsForNodes = countOrbitsForNodes;
exports.getEdges = getEdges;
exports.countAllOrbits = countAllOrbits;
/* StringMap Not a pure module */
